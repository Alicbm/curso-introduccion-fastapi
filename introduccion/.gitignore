# Created by https://www.toptal.com/developers/gitignore/api/windows,macos,linux,python
# Edit at https://www.toptal.com/developers/gitignore?templates=windows,macos,linux,python

### Linux ###
*~

# temporary files which can be created if a process still has a handle open of a deleted file
.fuse_hidden*

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*

# .nfs files are created when an open file is removed but is still being accessed
.nfs*

### macOS ###
# General
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon


# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

### macOS Patch ###
# iCloud generated files
*.icloud

### Python ###
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

### Python Patch ###
# Poetry local configuration file - https://python-poetry.org/docs/configuration/#local-configuration
poetry.toml

# ruff
.ruff_cache/

# LSP config files
pyrightconfig.json

### Windows ###
# Windows thumbnail cache files
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db

# Dump file
*.stackdump

# Folder config file
[Dd]esktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msix
*.msm
*.msp

# Windows shortcuts
*.lnk

# End of https://www.toptal.com/developers/gitignore/api/windows,macos,linux,python
 102 changes: 102 additions & 0 deletions102  
main.py
@@ -0,0 +1,102 @@
from fastapi import FastAPI, Body
from fastapi.responses import HTMLResponse

app = FastAPI()

app.title = 'My App with FastAPI'
app.version = '0.0.1'

movies = [
  {
    "id": 1,
    "title": 'Avatar',
    "overview": 'En un exuberante planeta llamado Pandora',
    "year": "2009",
    "rating": 7.8,
    "category": 'Accion'
  },
  {
    "id": 2,
    "title": 'Avatar',
    "overview": 'En un exuberante planeta llamado Pandora',
    "year": "2009",
    "rating": 7.8,
    "category": 'Accion'
  }
]

@app.get('/', tags=['home'])
def message():
  return HTMLResponse('<h1>Alic Barandica</h1>')


@app.get('/movies', tags=['movies'])
def get_movies():
  return movies

@app.get('/movies/{id}', tags=['movies'])
def filter_movie(id: int):
  for item in movies:
    if item['id'] == id:
      return item

#parametro query
#http://localhost:5000/movies/?category=accion
@app.get('/movies/', tags=['movies'])
def get_movies_by_category(category: str):
  filter_data = list(filter(lambda x: x['category'] == category.title(), movies))
  return filter_data

@app.post('/movies', tags=['movies'])
def create_movie(
  id: int = Body(), 
  title: str = Body(), 
  overview: str = Body(), 
  year: int = Body(), 
  rating: float = Body(),
  category: str = Body(), 
):
  movies.append({
    "id": id,
    "title": title,
    "overview": overview,
    "year": year,
    "rating": rating,
    "category": category,    
  })
  return {
    "id": id,
    "title": title,
    "overview": overview,
    "year": year,
    "rating": rating,
    "category": category,    
  }

@app.put('/movies/{id}', tags=['movies'])
def update_movie(
  id: int, 
  title: str = Body(), 
  overview: str = Body(), 
  year: int = Body(), 
  rating: float = Body(),
  category: str = Body(), 
):
  for item in movies:
    if item["id"] == id:
      item.update({
        "id": id,
        "title": title,
        "overview": overview,
        "year": year,
        "rating": rating,
        "category": category,
      })
      return item

@app.delete('/movies/{id}', tags=['movies'])
def delete_movie(id: int):
  for item in movies:
    if item["id"] == id:
      movies.remove(item)
      return movies